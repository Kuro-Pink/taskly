import Invite from "../models/Invite.js";
import Project from "../models/Project.js";
import Status from '../models/Status.js'; // ‚úÖ B·ªï sung import
import { sendNotificationToUser } from "../services/notificationService.js";
import axios from 'axios';

// üü¢ T·∫°o d·ª± √°n m·ªõi
export const createProject = async (req, res) => {
  const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
  try {
    const { name, description, key } = req.body;
    const ownerId = req.user?.id;

    if (!ownerId) {
      return res.status(401).json({ message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o d·ª± √°n" });
    }

    if (!name) {
      return res.status(400).json({ message: "T√™n d·ª± √°n l√† b·∫Øt bu·ªôc" });
    }

    let projectKey = key || name.substring(0, 3).toUpperCase();
    let existingProject = await Project.findOne({ key: projectKey });
    let counter = 1;

    while (existingProject) {
      projectKey = `${name.substring(0, 3).toUpperCase()}${counter}`;
      existingProject = await Project.findOne({ key: projectKey });
      counter++;
    }

    // 1. T·∫°o repo GitHub
    const response = await axios.post(
      "https://api.github.com/user/repos",
      { name, private: false },
      {
        headers: {
          Authorization: `token ${GITHUB_TOKEN}`,
          Accept: "application/vnd.github.v3+json",
        },
      }
    );

    const githubUrl = response.data.html_url;

    // T·∫°o d·ª± √°n m·ªõi
    const newProject = new Project({
      name,
      description,
      key: projectKey,
      githubUrl,
      owner: ownerId,
      members: [{ user: ownerId, role: "Owner", name: req.user.name }],
    });

    await newProject.save();

      // Sau khi newProject.save() xong
    const defaultStatuses = ["Ph·∫£i l√†m", "ƒêang l√†m", "Ho√†n th√†nh"];

    await Promise.all(
      defaultStatuses.map((statusName) => {
        const status = new Status({ name: statusName, project: newProject._id, creator: ownerId });
        return status.save();
      })
    );

    res.status(201).json({ message: "D·ª± √°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† 3 status m·∫∑c ƒë·ªãnh ƒë√£ c√≥ s·∫µn", project: newProject });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o d·ª± √°n", error: error.message });
  }
};


// üü¢ L·∫•y to√†n b·ªô d·ª± √°n
export const getAllProjects = async (req, res) => {
  try {
    const projects = await Project.find().populate("owner", "name email");
    res.json({ projects });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch d·ª± √°n", error: error.message });
  }
};

// üü¢ L·∫•y d·ª± √°n theo ID
export const getProjectById = async (req, res) => {
  try {
    const { projectId } = req.params;

    // T√¨m d·ª± √°n v√† populate owner + members
    const project = await Project.findById(projectId)
      .populate("owner", "name email")
      .populate("members.user", "name email");

    if (!project) {
      return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ project });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin d·ª± √°n", error: error.message });
  }
};

// ‚úÖ H√†m X√≥a D·ª± √Ån
export const deleteProject = async (req, res) => {
  try {
      const { projectId } = req.params;

      // üîπ T√¨m d·ª± √°n trong database
      const project = await Project.findById(projectId);
      if (!project) {
          return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
      }

      // üîπ Ki·ªÉm tra quy·ªÅn x√≥a (Ch·ªâ ch·ªß s·ªü h·ªØu c√≥ quy·ªÅn)
      if (project.owner.toString() !== req.user.id) {
          return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a d·ª± √°n n√†y" });
      }

      await project.deleteOne(); // ‚úÖ X√≥a d·ª± √°n
      res.status(200).json({ message: "D·ª± √°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
  } catch (error) {
      res.status(500).json({ message: "L·ªói khi x√≥a d·ª± √°n", error: error.message });
  }
};


export const requestJoinProject = async (req, res) => {
  try {
    const { code } = req.body; // G·ªôp c·∫£ inviteCode v√† token chung 1 t√™n
    const userId = req.user.id;

    // C√≥ th·ªÉ code l√† inviteCode ho·∫∑c token, th·ª≠ t√¨m theo c·∫£ 2
    let project = await Project.findOne({ inviteCode: code });
    
    if (!project) {
      // N·∫øu kh√¥ng ph·∫£i inviteCode, th·ª≠ xem c√≥ ph·∫£i token d·∫°ng li√™n k·∫øt m·ªùi kh√¥ng
      const invite = await Invite.findOne({ token: code }); // n·∫øu c√≥ b·∫£ng ri√™ng
    
      if (!invite) {
        return res.status(404).json({ message: "M√£ m·ªùi kh√¥ng h·ª£p l·ªá" });
      }
      project = await Project.findById(invite.projectId);
      if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra ƒë√£ l√† th√†nh vi√™n
    if (project.members.some(m => m.user.toString() === userId)) {
      return res.status(400).json({ message: "B·∫°n ƒë√£ l√† th√†nh vi√™n" });
    }

    // Th√™m user v√†o project
    project.members.push({ user: userId, role: "Member", name: req.user.name });
    await project.save();

    // G·ª≠i th√¥ng b√°o cho Owner
    sendNotificationToUser(project.owner, "NEW_NOTIFICATION", `Y√™u c·∫ßu tham gia d·ª± √°n t·ª´ ${req.user.name}`);

    res.json({ message: "V√†o d·ª± √°n th√†nh c√¥ng.", project });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x·ª≠ l√Ω y√™u c·∫ßu tham gia", error: error.message });
  }
};


export const getProjectMembers = async (req, res) => {
  try {
    const { projectId } = req.params;

    const project = await Project.findById(projectId)
      .populate("members.user", "name email")
      .populate("pendingInvites.user", "name email"); // <-- populate th√™m pendingInvites

    if (!project) {
      return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ 
      members: project.members,
      pendingInvites: project.pendingInvites // <-- tr·∫£ lu√¥n pendingInvites
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n", error: error.message });
  }
};

export const updateMemberRole = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { userId, newRole } = req.body;

    const project = await Project.findById(projectId);
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    const owner = project.members.find(m => m.user.toString() === req.user.id && m.role === "Owner");
    if (!owner) return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi vai tr√≤" });

    const member = project.members.find(m => m.user.toString() === userId);
    if (!member) return res.status(404).json({ message: "Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i" });

    member.role = newRole;
    await project.save();

    res.json({ message: "C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng", member });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t vai tr√≤", error: error.message });
  }
};

export const removeMember = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { userId } = req.body;

    const project = await Project.findById(projectId);
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    const owner = project.members.find(m => m.user.toString() === req.user.id && m.role === "Owner");
    if (!owner) return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th√†nh vi√™n" });

    project.members = project.members.filter(m => m.user.toString() !== userId);
    await project.save();

    // G·ª≠i notification cho ng∆∞·ªùi b·ªã remove
    sendNotificationToUser(userId, `B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi d·ª± √°n ${project.name}.`);

    res.status(200).json({ message: "X√≥a th√†nh vi√™n th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a th√†nh vi√™n", error: error.message });
  }
};
