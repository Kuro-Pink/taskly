import crypto from 'crypto';
import Invite from '../models/Invite.js';
import sendMail from '../utils/sendMail.js';
import Project from '../models/Project.js';

export const sendInviteEmail = async (req, res) => {
  const { email } = req.body;
  const { projectId } = req.params;

  const token = crypto.randomBytes(24).toString('hex');
  const existingProject = await Project.findById(projectId);
    if (!existingProject) {
        return res.status(404).json({ message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i' });
    }    
    console.log('existingProject', existingProject);
    
  

  const invite = await Invite.create({
    email,
    token,
    projectId,
    status: 'pending',
    createdAt: new Date(),
    expiresAt: new Date(Date.now() + 1000 * 60 * 60 * 24),
  });

  const link = `http://localhost:5173/projects/${existingProject.key}/boards/${invite.projectId}/invite?token=${token}`;

  await sendMail({
    to: email,
    subject: 'üì© L·ªùi m·ªùi tham gia d·ª± √°n',
    html: `<p>B·∫°n ƒë∆∞·ª£c m·ªùi v√†o m·ªôt d·ª± √°n. Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ tham gia:</p>
           <a href="${link}">${link}</a>`,
  });

  res.status(200).json({ message: 'ƒê√£ g·ª≠i l·ªùi m·ªùi!' });
};

export const acceptInvite = async (req, res) => {
  const { token, userId } = req.body;

  const invite = await Invite.findOne({ token, status: 'pending' });
  if (!invite) return res.status(400).json({ message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });

  const project = await Project.findById(invite.projectId);
  if (!project) return res.status(404).json({ message: 'D·ª± √°n kh√¥ng t·ªìn t·∫°i' });

  // Ki·ªÉm tra n·∫øu user ƒë√£ ·ªü trong project th√¨ th√¥i
  const alreadyIn = project.members.some((m) => m.user.toString() === userId);
  if (!alreadyIn) {
    project.members.push({ user: userId, role: 'Member', name: 'Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi' });
    await project.save();
  }

  invite.status = 'accepted';
  await invite.save();

  res.status(200).json({ message: 'ƒê√£ tham gia d·ª± √°n th√†nh c√¥ng' });
};
