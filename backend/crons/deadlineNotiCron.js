// file: crons/deadlineNotiCron.js
import Task from '../models/Task.js';
import Notification from '../models/Notification.js';
import dayjs from 'dayjs';
import sendMail from '../utils/sendMail.js';


export const startDeadlineNotificationCron = () => {
  console.log('[Cron] Kh·ªüi ƒë·ªông ki·ªÉm tra deadline b·∫±ng setInterval m·ªói ng√†y...');

  setInterval(async () => {
    console.log('[Cron] üîÑ Tick ki·ªÉm tra task...');
    try {
      const today = dayjs();
      const tasks = await Task.find({ endDate: { $exists: true } })
        .populate({ path: 'status', select: 'name' })
        .populate('assignee')
        .populate('project');        

      console.log(`[Cron] T√¨m th·∫•y ${tasks.length} task c√≥ endDate`);

      for (let task of tasks) {
        const statusName = task.status?.name || 'ch∆∞a c√≥ status';
        const assigneeName = task.assignee?.name || 'ch∆∞a c√≥ assignee';
        const endDate = dayjs(task.endDate);

        if (!endDate.isValid()) {
          console.warn(`[Cron] ‚ùó Task "${task.title}" c√≥ endDate kh√¥ng h·ª£p l·ªá:`, task.endDate);
          continue;
        }

        console.log('[Cron] Task:', {
           
          assignee: assigneeName,
        });

        if (statusName === 'Ho√†n th√†nh') continue;
        if (!task.assignee) continue;

        const diff = endDate.diff(today, 'day');

        let action = '';
        if (diff < 0) {
          action = 'ƒë√£ qu√° h·∫°n';
        } else if (diff <= 2) {
          action = 's·∫Øp h·∫øt h·∫°n';
        } else {
          console.log(`[Cron] Task ch∆∞a c·∫ßn c·∫£nh b√°o: ${task.title} (c√≤n ${diff} ng√†y)`);
          continue;
        }

        const existed = await Notification.findOne({
          userId: task.assignee._id,
          projectId: task.project._id,
          target: `Issue ${task.project.name.substring(0, 3).toUpperCase()} - ${task.number} ${task.title}`,
          action,
          type: 'issue',
        });

        if (existed) continue;

        await Notification.create({
          userId: task.assignee._id,
          projectId: task.project._id,
          username: 'H·ªá th·ªëng',
          action,
          target: `Issue ${task.project.name.substring(0, 3).toUpperCase()} - ${task.number} ${task.title}`,
          type: 'issue',
          isRead: false,
        });

        console.log(`[Cron] ‚úÖ ƒê√£ t·∫°o th√¥ng b√°o: ${task.title} - ${action}`);

        // ‚úÖ G·ª≠i mail cho ng∆∞·ªùi nh·∫≠n task
       console.log(`[Cron] üì® G·ª≠i mail ƒë·∫øn: ${task.assignee.email}`);
        // ‚úÖ G·ª≠i mail cho ng∆∞·ªùi nh·∫≠n task
        if (task.assignee.email) {
          await sendMail({
            to: task.assignee.email,
            subject: `üîî Task "${task.title}" ${action}`,
            html: `
              <p>Xin ch√†o <b>${task.assignee.name}</b>,</p>
              <p>Task <b>${task.title}</b> trong d·ª± √°n <b>${task.project.name}</b> hi·ªán ƒëang <b>${action}</b>.</p>
              <p>H·∫°n ch√≥t: <b>${dayjs(task.endDate).format('DD/MM/YYYY')}</b></p>
              <hr/>
              <p style="color:gray">ƒê√¢y l√† email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng.</p>
            `,
          });
        }
        console.log(`[Cron] ‚úÖ ƒê√£ g·ª≠i mail c·∫£nh b√°o cho ${task.assignee.email}`);
      }
    } catch (error) {
      console.error('[Cron] ‚ùå L·ªói ki·ªÉm tra deadline:', error);
    }
  },  24 * 60 * 60 * 1000); // m·ªói ph√∫t
};
