import mongoose from "mongoose";
import bcrypt from "bcryptjs";

const UserSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
  },
  { timestamps: true }
);

// ðŸ“Œ Hash máº­t kháº©u TRÆ¯á»šC khi lÆ°u
UserSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next(); // Chá»‰ hash khi máº­t kháº©u thay Ä‘á»•i
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});


// ðŸ“Œ HÃ m kiá»ƒm tra máº­t kháº©u
UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

const User = mongoose.model("User", UserSchema);
export default User;
