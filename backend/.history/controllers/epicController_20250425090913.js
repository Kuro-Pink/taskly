import Epic from '../models/Epic.js';
import { sendWebSocketUpdate } from '../config/websocket.js'; // ƒê·∫£m b·∫£o b·∫°n c√≥ file n√†y ƒë·ªÉ x·ª≠ l√Ω WebSocket.

// üü¢ T·∫°o Epic m·ªõi
export const createEpic = async (req, res) => {
  try {
    const { name, projectId } = req.body;
    const userId = req.user.id;
    const newEpic = new Epic({ name, projectId, creator: userId });

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("CREATE_EPIC", {
      name, projectId
    });

    await newEpic.save();
    res.status(201).json(newEpic);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi t·∫°o Epic', error: err.message });
  }
};

// üü¢ L·∫•y t·∫•t c·∫£ Epic
export const getAllEpic = async (req, res) => {
  try {
    const epics = await Epic.find(); // L·∫•y t·∫•t c·∫£ epic, kh√¥ng l·ªçc theo project
    res.status(200).json(epics);
  } catch (err) {
    res.status(500).json({
      message: 'L·ªói khi l·∫•y danh s√°ch Epic',
      error: err.message,
    });
  }
};

// üü¢ S·ª≠a Epic
export const updateEpic = async (req, res) => {
  try {
    const { epicId } = req.params; // ƒê·∫£m b·∫£o b·∫°n s·ª≠ d·ª•ng epicId thay v√¨ projectId

    const updatedEpic = await Epic.findByIdAndUpdate(epicId, req.body, { new: true });

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("UPDATE_EPIC", {
      epicId,
      ...req.body // Truy·ªÅn th√¥ng tin Epic ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    });

    if (!updatedEpic) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y Epic' });
    }

    res.status(200).json(updatedEpic);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t Epic', error: err.message });
  }
};

// üü¢ X√≥a Epic
export const deleteEpic = async (req, res) => {
  try {
    const { epicId } = req.params; // ƒê·∫£m b·∫£o b·∫°n s·ª≠ d·ª•ng epicId thay v√¨ projectId

    const deletedEpic = await Epic.findByIdAndDelete(epicId);

    if (!deletedEpic) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y Epic' });
    }

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("DELETE_EPIC", { epicId });

    res.status(200).json({ message: 'Xo√° Epic th√†nh c√¥ng' });
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi xo√° Epic', error: err.message });
  }
};
