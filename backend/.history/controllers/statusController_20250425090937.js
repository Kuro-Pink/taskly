import Status from '../models/Status.js';
import { sendWebSocketUpdate } from '../config/websocket.js'; // ƒê·∫£m b·∫£o b·∫°n c√≥ file n√†y ƒë·ªÉ x·ª≠ l√Ω WebSocket.

// üü¢ T·∫°o status m·ªõi
export const createStatus = async (req, res) => {
  try {
    const { name, project } = req.body;
    const userId = req.user.id;

    // Ki·ªÉm tra n·∫øu status ƒë√£ t·ªìn t·∫°i
    const existingStatus = await Status.findOne({ name, project, creator: userId });
    if (existingStatus) {
      return res.status(400).json({ message: 'Status ƒë√£ t·ªìn t·∫°i' });
    }

    // T·∫°o status m·ªõi
    const newStatus = new Status({ name, project });

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("CREATE_STATUS", newStatus);

    await newStatus.save();
    res.status(201).json(newStatus);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi t·∫°o status', error });
  }
};

// üü¢ C·∫≠p nh·∫≠t status
export const updateStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const { name } = req.body;

    // C·∫≠p nh·∫≠t status
    const updatedStatus = await Status.findByIdAndUpdate(id, { name }, { new: true });

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("UPDATE_STATUS", updatedStatus);

    if (!updatedStatus) {
      return res.status(404).json({ message: 'Status kh√¥ng t·ªìn t·∫°i!' });
    }

    res.status(200).json(updatedStatus);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t Status', error: error.message });
  }
};

// üü¢ L·∫•y t·∫•t c·∫£ status
export const getAllStatuses = async (req, res) => {
  try {
    const statuses = await Status.find();
    res.status(200).json(statuses);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch status', error });
  }
};

// üü¢ L·∫•y status theo ID
export const getStatusById = async (req, res) => {
  try {
    const { id } = req.params;
    const status = await Status.findById(id);

    if (!status) {
      return res.status(404).json({ message: 'Status kh√¥ng t·ªìn t·∫°i' });
    }

    res.status(200).json(status);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y status', error });
  }
};

// üü¢ X√≥a status
export const deleteStatus = async (req, res) => {
  try {
    const { id } = req.params;
    
    // T√¨m v√† x√≥a status
    const deletedStatus = await Status.findByIdAndDelete(id);

    if (!deletedStatus) {
      return res.status(404).json({ message: 'Status kh√¥ng t·ªìn t·∫°i' });
    }

    // G·ª≠i th√¥ng b√°o qua WebSocket
    sendWebSocketUpdate("DELETE_STATUS", deletedStatus);

    res.status(200).json({ message: 'X√≥a status th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói khi x√≥a status', error });
  }
};
