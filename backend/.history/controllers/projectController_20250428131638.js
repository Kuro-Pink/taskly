import Project from "../models/Project.js";
import Status from '../models/Status.js'; // ‚úÖ B·ªï sung import
import { sendNotificationToUser, sendWebSocketUpdate } from "../services/notificationService.js";

// üü¢ T·∫°o d·ª± √°n m·ªõi
export const createProject = async (req, res) => {
  try {
    const { name, description, key } = req.body;
    const ownerId = req.user?.id;

    if (!ownerId) {
      return res.status(401).json({ message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o d·ª± √°n" });
    }

    if (!name) {
      return res.status(400).json({ message: "T√™n d·ª± √°n l√† b·∫Øt bu·ªôc" });
    }

    let projectKey = key || name.substring(0, 3).toUpperCase();
    let existingProject = await Project.findOne({ key: projectKey });
    let counter = 1;

    while (existingProject) {
      projectKey = `${name.substring(0, 3).toUpperCase()}${counter}`;
      existingProject = await Project.findOne({ key: projectKey });
      counter++;
    }

    // T·∫°o d·ª± √°n m·ªõi
    const newProject = new Project({
      name,
      description,
      key: projectKey,
      owner: ownerId,
      members: [{ user: ownerId, role: "Owner" }],
    });

    await newProject.save();

      // Sau khi newProject.save() xong
    await Promise.all(
      defaultStatuses.map((statusName) => {
        const status = new Status({ name: statusName, project: newProject._id });
        return status.save();
      })
    );
      

    for (let statusName of defaultStatuses) {
      const status = new Status({ name: statusName, project: newProject._id });
      await status.save();
    }

    res.status(201).json({ message: "D·ª± √°n ƒë√£ ƒë∆∞·ª£c t·∫°o v√† 3 status m·∫∑c ƒë·ªãnh ƒë√£ c√≥ s·∫µn", project: newProject });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi t·∫°o d·ª± √°n", error: error.message });
  }
};

// üü¢ L·∫•y to√†n b·ªô d·ª± √°n
export const getAllProjects = async (req, res) => {
  try {
    const projects = await Project.find().populate("owner", "name email");
    res.json({ projects });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch d·ª± √°n", error: error.message });
  }
};

// üü¢ L·∫•y d·ª± √°n theo ID
export const getProjectById = async (req, res) => {
  try {
    const { projectId } = req.params;

    // T√¨m d·ª± √°n v√† populate owner + members
    const project = await Project.findById(projectId)
      .populate("owner", "name email")
      .populate("members.user", "name email");

    if (!project) {
      return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ project });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y th√¥ng tin d·ª± √°n", error: error.message });
  }
};

// ‚úÖ H√†m X√≥a D·ª± √Ån
export const deleteProject = async (req, res) => {
  try {
      const { projectId } = req.params;

      // üîπ T√¨m d·ª± √°n trong database
      const project = await Project.findById(projectId);
      if (!project) {
          return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
      }

      // üîπ Ki·ªÉm tra quy·ªÅn x√≥a (Ch·ªâ ch·ªß s·ªü h·ªØu c√≥ quy·ªÅn)
      if (project.owner.toString() !== req.user.id) {
          return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a d·ª± √°n n√†y" });
      }

      await project.deleteOne(); // ‚úÖ X√≥a d·ª± √°n
      res.status(200).json({ message: "D·ª± √°n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
  } catch (error) {
      res.status(500).json({ message: "L·ªói khi x√≥a d·ª± √°n", error: error.message });
  }
};


export const requestJoinProject = async (req, res) => {
  try {
    const { inviteCode } = req.params;
    const userId = req.user.id;

    const project = await Project.findOne({ inviteCode });
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    // Ki·ªÉm tra ƒë√£ l√† th√†nh vi√™n ho·∫∑c ƒëang ch·ªù duy·ªát
    if (project.members.some(m => m.user.toString() === userId)) {
      return res.status(400).json({ message: "B·∫°n ƒë√£ l√† th√†nh vi√™n" });
    }
    if (project.pendingInvites.some(i => i.user.toString() === userId)) {
      return res.status(400).json({ message: "B·∫°n ƒë√£ g·ª≠i y√™u c·∫ßu tham gia" });
    }

    // Th√™m user v√†o pendingInvites
    project.pendingInvites.push({ user: userId });
    await project.save();

    // G·ª≠i th√¥ng b√°o cho Owner
    sendNotificationToUser(project.owner, "NEW_NOTIFICATION", `Y√™u c·∫ßu tham gia d·ª± √°n t·ª´ ${req.user.name}`);

    res.json({ message: "Y√™u c·∫ßu tham gia ƒë√£ ƒë∆∞·ª£c g·ª≠i. ƒê·ª£i x√°c nh·∫≠n t·ª´ ch·ªß d·ª± √°n." });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x·ª≠ l√Ω y√™u c·∫ßu tham gia", error: error.message });
  }
};

export const respondJoinRequest = async (req, res) => {
  try {
    const { projectId, userId, action } = req.body;
    const project = await Project.findById(projectId);    
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    // Ki·ªÉm tra quy·ªÅn Owner/Lead
    const ownerOrLead = project.members.find(
      m => m.user.toString() === req.user.id && (m.role === "Owner" || m.role === "Lead")
    );
    if (!ownerOrLead) return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn duy·ªát th√†nh vi√™n" });

    // T√¨m user trong pendingInvites
    const inviteIndex = project.pendingInvites.findIndex(i => i.user.toString() === userId);
    if (inviteIndex === -1) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu tham gia n√†y" });
    }

    if (action === "accept") {
      project.members.push({ user: userId, role: "Member" });
      sendNotificationToUser(userId, "NEW_NOTIFICATION", "B·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n v√†o d·ª± √°n!");

      // G·ª≠i activity log cho to√†n b·ªô project
      sendWebSocketUpdate("NEW_NOTIFICATION", {
        projectId: project._id,
        message: `${req.user.name} ƒë√£ ch·∫•p nh·∫≠n m·ªôt th√†nh vi√™n m·ªõi v√†o d·ª± √°n.`
      });
    } else {
      sendNotificationToUser(userId, "Y√™u c·∫ßu tham gia d·ª± √°n c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.");
    }

    // X√≥a kh·ªèi pendingInvites
    project.pendingInvites.splice(inviteIndex, 1);
    await project.save();

    res.json({ message: action === "accept" ? "Th√†nh vi√™n ƒë√£ ƒë∆∞·ª£c th√™m" : "Y√™u c·∫ßu ƒë√£ b·ªã t·ª´ ch·ªëi" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói x·ª≠ l√Ω duy·ªát y√™u c·∫ßu", error: error.message });
  }
};

export const getProjectMembers = async (req, res) => {
  try {
    const { projectId } = req.params;

    const project = await Project.findById(projectId)
      .populate("members.user", "name email")
      .populate("pendingInvites.user", "name email"); // <-- populate th√™m pendingInvites

    if (!project) {
      return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });
    }

    res.json({ 
      members: project.members,
      pendingInvites: project.pendingInvites // <-- tr·∫£ lu√¥n pendingInvites
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi l·∫•y danh s√°ch th√†nh vi√™n", error: error.message });
  }
};

export const updateMemberRole = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { userId, newRole } = req.body;

    const project = await Project.findById(projectId);
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    const owner = project.members.find(m => m.user.toString() === req.user.id && m.role === "Owner");
    if (!owner) return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn thay ƒë·ªïi vai tr√≤" });

    const member = project.members.find(m => m.user.toString() === userId);
    if (!member) return res.status(404).json({ message: "Th√†nh vi√™n kh√¥ng t·ªìn t·∫°i" });

    member.role = newRole;
    await project.save();

    res.json({ message: "C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng", member });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi c·∫≠p nh·∫≠t vai tr√≤", error: error.message });
  }
};

export const removeMember = async (req, res) => {
  try {
    const { projectId } = req.params;
    const { userId } = req.body;

    const project = await Project.findById(projectId);
    if (!project) return res.status(404).json({ message: "D·ª± √°n kh√¥ng t·ªìn t·∫°i" });

    const owner = project.members.find(m => m.user.toString() === req.user.id && m.role === "Owner");
    if (!owner) return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a th√†nh vi√™n" });

    project.members = project.members.filter(m => m.user.toString() !== userId);
    await project.save();

    // G·ª≠i notification cho ng∆∞·ªùi b·ªã remove
    sendNotificationToUser(userId, `B·∫°n ƒë√£ b·ªã lo·∫°i kh·ªèi d·ª± √°n ${project.name}.`);

    res.status(200).json({ message: "X√≥a th√†nh vi√™n th√†nh c√¥ng" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói khi x√≥a th√†nh vi√™n", error: error.message });
  }
};
