import Comment from '../models/Comment.js';
import { SOCKET_EVENTS } from '../constants/socketEvents.js';
import { sendWebSocketUpdate } from '../services/notificationService.js'; // ƒê·∫£m b·∫£o b·∫°n c√≥ file n√†y ƒë·ªÉ x·ª≠ l√Ω WebSocket.

// üìå L·∫•y t·∫•t c·∫£ comment c·ªßa 1 issue
export const getCommentsByIssue = async (req, res) => {
  try {
    const { issueId } = req.params;
    if (!issueId) {
      return res.status(400).json({ message: 'Thi·∫øu issueId' });
    }

    const comments = await Comment.find({ issue: issueId })
      .populate('user') // ‚ö†Ô∏è ƒê·∫£m b·∫£o l√† 'user' n·∫øu schema d√πng 'user'
      .sort({ createdAt: 1 });

    res.status(200).json(comments);
  } catch (err) {
    console.error('L·ªói khi l·∫•y comment:', err);
    res.status(500).json({ message: 'L·ªói khi l·∫•y comment' });
  }
};

// üìå T·∫°o comment m·ªõi
export const createComment = async (req, res) => {
  try {
    const { issueId, content } = req.body;
    const userId = req.user?.id;
    
    
    if (!issueId || !content || !userId) {
      return res.status(400).json({ message: 'Thi·∫øu issueId, content ho·∫∑c userId' });
    }

    const newComment = await Comment.create({
      issue: issueId,
      content,
      user: userId,
    });

    // G·ª≠i th√¥ng b√°o realtime
    sendWebSocketUpdateToIssue(issueId, SOCKET_EVENTS.CREATE_COMMENT, {
      type: "notify", // ho·∫∑c "activity", ho·∫∑c lo·∫°i kh√°c
      message: "üÜï Issue ABC ƒë√£ ƒë∆∞·ª£c t·∫°o",
      issueId: "123abc",       // (tu·ª≥ lo·∫°i)
      projectId: "proj456",    // (tu·ª≥ lo·∫°i)
      sender: {
        _id: "user001",
        name: "Nguy·ªÖn VƒÉn A",
        avatar: "https://..."  // n·∫øu c√≥
      },
      timestamp: Date.now()
    }
    );


    res.status(201).json(newComment);
  } catch (err) {
    console.error('L·ªói khi t·∫°o comment:', err);
    res.status(500).json({ message: 'L·ªói khi t·∫°o comment', error: err.message });
  }
};

// üìå C·∫≠p nh·∫≠t n·ªôi dung comment
export const updateComment = async (req, res) => {
  try {
    const { id } = req.params;
    const { content } = req.body;

    if (!content) {
      return res.status(400).json({ message: 'N·ªôi dung comment kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng' });
    }

    const updatedComment = await Comment.findByIdAndUpdate(
      id,
      { content },
      { new: true }
    );

    if (!updatedComment) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n' });
    }

    sendWebSocketUpdateToIssue(updatedComment.issue, SOCKET_EVENTS.UPDATE_COMMENT, {
      issueId: updatedComment.issue,
      comment: updatedComment,
    });

    res.status(200).json(updatedComment);
  } catch (err) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t comment:', err);
    res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t comment', error: err.message });
  }
};

// üìå Xo√° comment
export const deleteComment = async (req, res) => {
  try {
    const { id } = req.params;

    const deletedComment = await Comment.findByIdAndDelete(id);

    if (!deletedComment) {
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n ƒë·ªÉ xo√°' });
    }

    sendWebSocketUpdateToIssue(deletedComment.issue, SOCKET_EVENTS.DELETE_COMMENT, {
      issueId: deletedComment.issue,
      commentId: deletedComment._id,
    });

    res.status(200).json({ message: 'Xo√° th√†nh c√¥ng' });
  } catch (err) {
    console.error('L·ªói khi xo√° comment:', err);
    res.status(500).json({ message: 'L·ªói khi xo√° comment', error: err.message });
  }
};
