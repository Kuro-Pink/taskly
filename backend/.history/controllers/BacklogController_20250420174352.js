import Task from '../models/Task.js';
import Sprint from '../models/Sprint.js';
import Status from '../models/Status.js';

// üü¢ L·∫•y t·∫•t c·∫£ Issue (Backlog)
export const getAllIssues = async (req, res) => {
    try {
        const issues = await Task.find();
        res.json(issues);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch issue', error });
    }
};

// üü¢ L·∫•y Issue theo ID
export const getIssueById = async (req, res) => {
    try {
      const { issueId } = req.params;
      const issue = await Task.findById(issueId);
  
      if (!issue) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y issue' });
      }
  
      res.status(200).json(issue);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói khi l·∫•y issue', error });
    }
  };
  

// üü¢ L·∫•y t·∫•t c·∫£ Sprint
export const getAllSprints = async (req, res) => {
    try {
        const sprints = await Sprint.find().populate('issues');
        res.json(sprints);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch sprint', error });
    }
};

// üü¢ L·∫•y Sprint theo ID
export const getSprintById = async (req, res) => {
    try {
      const { sprintId } = req.params;
      const sprint = await Sprint.findById(sprintId).populate('issues'); // Populate ƒë·ªÉ l·∫•y c√°c task li√™n quan ƒë·∫øn sprint
  
      if (!sprint) {
        return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y sprint' });
      }
  
      res.status(200).json(sprint);
    } catch (error) {
      res.status(500).json({ message: 'L·ªói khi l·∫•y sprint', error });
    }
  };


// üü¢ T·∫°o Issue m·ªõi
export const createIssue = async (req, res) => {
    try {
        const { title, type, project, status, epic } = req.body;
        // L·∫•y issue c√≥ s·ªë l·ªõn nh·∫•t
        const lastIssue = await Task.findOne({ project }).sort({ number: -1 });
        const nextNumber = lastIssue ? lastIssue.number + 1 : 1;

        const newIssue = new Task({ title,  number: nextNumber, type, project, status, epic });

        await newIssue.save();
        res.status(201).json(newIssue);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi t·∫°o issue', error });
    }
};

// üü¢ S·ª≠a Issue
export const updateIssue = async (req, res) => {
    try {
        const { issueId } = req.params;

        const updatedIssue = await Task.findByIdAndUpdate(issueId, req.body, { new: true });

        if (!updatedIssue) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y issue' });
        }

        res.json(updatedIssue);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t issue', error });
    }
};

// üü¢ X√≥a Issue
export const deleteIssue = async (req, res) => {
    try {
        const { issueId } = req.params;
        const deletedIssue = await Task.findByIdAndDelete(issueId);

        if (!deletedIssue) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y issue' });
        }

        res.json({ message: 'X√≥a issue th√†nh c√¥ng' });
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi x√≥a issue', error });
    }
};


// üü¢ T·∫°o Sprint m·ªõi
export const createSprint = async (req, res) => {
    try {
        const { name, project } = req.body;
        const newSprint = new Sprint({ name, project });
        await newSprint.save();
        res.status(201).json(newSprint);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi t·∫°o sprint', error });
    }
};

// üü¢ S·ª≠a Sprint
export const updateSprint = async (req, res) => {
    try {
        const { sprintId } = req.params;
        
        
        const updatedSprint = await Sprint.findByIdAndUpdate(sprintId, req.body, { new: true });

        if (!updatedSprint) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y sprint' });
        }

        res.json(updatedSprint);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t sprint', error });
    }
};

export const deleteSprint = async (req, res) => {
    try {
        const { sprintId } = req.params;
        // X√≥a sprint
        const deletedSprint = await Sprint.findByIdAndDelete(sprintId);

        if (!deletedSprint) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y sprint' });
        }

        // üü† C·∫≠p nh·∫≠t c√°c issue trong sprint n√†y v·ªÅ backlog (sprint: null)
        await Task.updateMany({ sprint: sprintId }, { $set: { sprint: null } });

        res.json({ message: 'X√≥a sprint th√†nh c√¥ng v√† c·∫≠p nh·∫≠t c√°c issue v·ªÅ backlog' });
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a sprint:', error);
        res.status(500).json({ message: 'L·ªói khi x√≥a sprint', error });
    }
};

// üîµ B·∫Øt ƒë·∫ßu sprint + chuy·ªÉn issue sang status "Ph·∫£i l√†m"
export const startSprint = async (req, res) => {
    const { sprintId } = req.params;    
    try {
        // 1. C·∫≠p nh·∫≠t tr·∫°ng th√°i sprint l√† "started"
        const sprint = await Sprint.findByIdAndUpdate(
            sprintId,
            { started: true },
            { new: true }
        );

        if (!sprint) {
            return res.status(404).json({ message: 'Sprint kh√¥ng t·ªìn t·∫°i' });
        }        

        // 2. T√¨m status "Ph·∫£i l√†m" trong project c·ªßa sprint
        const todoStatus = await Status.findOne({
            name: 'Ph·∫£i l√†m',
            project: sprint.project,
        });


        if (!todoStatus) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y status "Ph·∫£i l√†m"' });
        }

        // 3. C·∫≠p nh·∫≠t t·∫•t c·∫£ issue trong sprint sang status "Ph·∫£i l√†m"
        await Task.updateMany(
            { sprint: sprintId },
            { status: todoStatus._id } // ‚úÖ B·∫°n c·∫ßn c√≥ d√≤ng n√†y
        );
        

        res.status(200).json({
            message: 'Sprint ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu v√† c√°c issue ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
        });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi b·∫Øt ƒë·∫ßu sprint' });
    }
};


// üü¢ Di chuy·ªÉn Issue v√†o Sprint
export const moveIssueToSprint = async (req, res) => {
    try {
        const { issueId, sprintId } = req.params;
        

        const issue = await Task.findByIdAndUpdate(
            issueId,
            { sprint: sprintId },
            { new: true }
        );

        if (!issue) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y issue' });
        }

        res.json(issue);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi di chuy·ªÉn issue v√†o sprint', error });
    }
};

// üîµ Di chuy·ªÉn Issue v·ªÅ Backlog
export const moveIssueToBacklog = async (req, res) => {
    try {
        const { issueId } = req.params;

        const issue = await Task.findByIdAndUpdate(
            issueId,
            { sprint: null },
            { new: true }
        );

        if (!issue) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y issue' });
        }

        res.json(issue);
    } catch (error) {
        res.status(500).json({ message: 'L·ªói khi di chuy·ªÉn issue v·ªÅ backlog', error });
    }
};

